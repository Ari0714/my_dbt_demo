



+pre-hook: "{{ auto_schema_align_prehook() }}"



{% macro auto_schema_align_prehook() %}
{# =========================================================
完全自动 pre-hook + schema 对齐宏
适用于 Spark + Iceberg
- 自动开启 merge-schema
- 打印源表与目标表列差异
- 不修改模型 SQL
- 不修改目标表结构
========================================================= #}

{# 当前模型 relation #}
{% set model_relation = this %}

{{ log("🔧 Auto Schema Align Pre-Hook for model: " ~ model_relation, info=True) }}

{# 1️⃣ 启用 Spark merge-schema 和 Iceberg 自动迁移 #}
{% do run_query("SET spark.sql.iceberg.merge-schema=true") %}
{% do run_query("SET spark.sql.iceberg.schema.auto-migration.enabled=true") %}
{% do run_query("SET spark.sql.sources.partitionOverwriteMode=dynamic") %}

{# 2️⃣ 获取源表列信息 #}
{% set src_cols = adapter.get_columns_in_relation(model_relation) %}
{% if src_cols is none %}
    {{ log("⚠️ 无法获取源表列信息", info=True) }}
{% else %}
    {% set src_names = [] %}
    {% for col in src_cols %}
        {% do src_names.append(col.name|string) %}
    {% endfor %}
{% endif %}

{# 3️⃣ 获取目标表列信息 #}
{% set tgt_cols = adapter.get_columns_in_relation(model_relation) %}
{% if tgt_cols is none %}
    {{ log("⚠️ 目标表不存在或无法获取列信息，merge-schema 会自动创建表", info=True) }}
{% else %}
    {% set tgt_names = [] %}
    {% for col in tgt_cols %}
        {% do tgt_names.append(col.name|string) %}
    {% endfor %}

    {# 4️⃣ 计算缺列和多余列（安全写法，不用 difference、reject） #}
    {% set missing_cols = [] %}
    {% for col in tgt_names %}
        {% if col not in src_names %}
            {% do missing_cols.append(col) %}
        {% endif %}
    {% endfor %}

    {% set extra_cols = [] %}
    {% for col in src_names %}
        {% if col not in tgt_names %}
            {% do extra_cols.append(col) %}
        {% endif %}
    {% endfor %}

    {# 5️⃣ 打印日志 #}
    {% if missing_cols | length > 0 %}
        {{ log("⚠️ 模型缺少目标列，将写入时自动补 NULL: " ~ (missing_cols | join(', ')), info=True) }}
    {% endif %}
    {% if extra_cols | length > 0 %}
        {{ log("⚠️ 模型存在多余列，将被忽略: " ~ (extra_cols | join(', ')), info=True) }}
    {% endif %}
{% endif %}

{% endmacro %}



macros/auto_schema_align_prehook.sql
{% macro auto_schema_align_prehook() %}
{#
完全自动 pre-hook + schema 对齐宏
- 使用 Spark + Iceberg merge-schema 自动补缺列
- 打印日志
- 不改模型 SQL
#}

{# 当前模型 relation #}
{% set model_relation = this %}

{# 启用 Spark merge-schema 和 Iceberg 自动迁移 #}
{% do run_query("SET spark.sql.iceberg.merge-schema=true") %}
{% do run_query("SET spark.sql.iceberg.schema.auto-migration.enabled=true") %}
{% do run_query("SET spark.sql.sources.partitionOverwriteMode=dynamic") %}

{# 打印当前模型 &目标表信息 #}
{{ log("🔧 Auto Schema Align: " ~ model_relation, info=True) }}

{# 获取源表 columns #}
{% set src_cols = adapter.get_columns_in_relation(model_relation) %}
{% if src_cols is none %}
    {{ log("⚠️ 无法获取源表列信息", info=True) }}
{% else %}
    {% set src_names = src_cols | map(attribute='name') | list %}
{% endif %}

{# 获取目标表 columns（如果表不存在，会返回 None） #}
{% set tgt_cols = adapter.get_columns_in_relation(model_relation) %}
{% if tgt_cols is none %}
    {{ log("⚠️ 目标表不存在或无法获取列信息, merge-schema 会自动创建表", info=True) }}
{% else %}
    {% set tgt_names = tgt_cols | map(attribute='name') | list %}

    {# 比较差异 #}
    {% set missing_cols = tgt_names | difference(src_names) %}
    {% set extra_cols = src_names | difference(tgt_names) %}

    {% if missing_cols | length > 0 %}
        {{ log("⚠️ 模型缺少目标列，将写入时自动补 NULL: " ~ (missing_cols | join(', ')), info=True) }}
    {% endif %}
    {% if extra_cols | length > 0 %}
        {{ log("⚠️ 模型存在多余列，将被忽略: " ~ (extra_cols | join(', ')), info=True) }}
    {% endif %}
{% endif %}
{% endmacro %}



----------

{{ config(
    materialized='incremental',
    options={
        "mergeSchema": "true"
    }
) }}


models:
  +file_format: iceberg
  +options:
      mergeSchema: true
  +pre-hook:
      - "SET spark.sql.iceberg.merge-schema=true"
      - "SET spark.sql.iceberg.schema.auto-migration.enabled=true"
      - "{{ log_schema_diff(this.name, 'analytics.user_profile') }}"


{% macro log_schema_diff(model_name, target_table) %}
  {% set src_cols = adapter.get_columns_in_relation(this) %}
  {% set tgt_cols = adapter.get_columns_in_relation(ref(target_table)) %}
  {% set src_names = src_cols | map(attribute='name') | list %}
  {% set tgt_names = tgt_cols | map(attribute='name') | list %}
  {% set missing_cols = tgt_names | difference(src_names) %}
  {% set extra_cols = src_names | difference(tgt_names) %}
  {% if missing_cols | length > 0 %}
    {{ log("⚠️ " ~ model_name ~ " 缺列 (目标表多): " ~ (missing_cols | join(', ')), info=True) }}
  {% endif %}
  {% if extra_cols | length > 0 %}
    {{ log("⚠️ " ~ model_name ~ " 多列 (将忽略): " ~ (extra_cols | join(', ')), info=True) }}
  {% endif %}
{% endmacro %}



-----------------

{% do run_query("set spark.sql.iceberg.schema.autoMerge.enabled=true") %}


your_profile:
  target: dev
  outputs:
    dev:
      type: spark
      method: odbc
      host: your-spark-thrift-server
      ... # 其他连接配置
      config:
        spark.sql.extensions: org.apache.iceberg.spark.extensions.IcebergSparkSessionExtensions
        spark.sql.catalog.your_catalog.merge-schema-on-write: true
        spark.sql.catalog.your_catalog.spark.sql.iceberg.merge-schema-on-write.enabled: true

outputs:
  dev:
    type: spark
    method: thrift
    ...
    schema: your_schema
    connect_retries: 5
    session_properties:
       spark.sql.iceberg.schema.autoMerge.enabled: true
